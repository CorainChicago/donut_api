exit
set_current_user_from_token.id && User.find_by(email: current_user_params).id
set_current_user_from_token.id
User.find_by(email: current_user_params)
current_user_params
exit
params
exit
params
exit
texit
request.headers['HTTP_X_USER_TOKEN']
user_token && User.find_by_authentication_token(user_token.to_s)
user_token = request.headers['HTTP_X_USER_TOKEN'].presence
user?
user
if user?
request.headers['HTTP_X_USER_TOKEN']
request.headers['HTTP_X_USER_TOKEN'].presence
exitequest.headers['HTTP_X_USER_TOKEN'].presence
exit
request.headers['HTTP_X_USER_TOKEN']
request.headers
exit
request.headers
exit
request.headers
request.headers['HTTP_X_USER_TOKEN']
request.headers['X-User-Token']
exit
request.headers['X-User-Token']
request.headers['HTTP_X_USER_TOKEN']
request.headers
exit
request.headers
request.headers['HTTP_X_USER_TOKEN']
set_current_user_from_token
et_current_user_from_token
@donut.user_id = set_current_user_from_token.id
exit
@donut
@donut.user_id = set_current_user_from_token.id
@donut = Donut.new(donut_params)
set_current_user_from_token
et_current_user_from_token
exit
request.headers
request.headers['X-User-Token']
request.headers['HTTP_X_USER_TOKEN']
set_current_user_from_token
@donut.user_id = set_current_user_from_token.id
@donut = Donut.new(donut_params)
exit
@user.save
@user.authentication_token = SecureRandom.hex(10)
@user.save
@user.authentication_token = SecureRandom.hex(20)
@user.save
@user.authentication_token = SecureRandom.hex(30)
@user.save
@user.authentication_token = SecureRandom.hex(32)
@user = current_user
warden.authenticate!(:scope => resource_name)
arden.authenticate!(:scope => resource_name)
exit
User.all
set_current_user_from_token
set_current_user_from_token.
exit
@donut
exit
t.authentication_token
t.token
t = set_current_user_from_token
user
set_current_user_from_token
user
exit
User.all
User.last
set_current_user_from_token
t = set_current_user_from_token
exit
t = set_current_user_from_token
t
t = set_current_user_from_token
set_current_user_from_token
@user
user
current_user
exit
current_user
@user
set_current_user_from_token
user
user = set_current_user_from_token
set_current_user_from_token
exit
user
@user
sign_in
current_user
exit
request.headers['HTTP_X_USER_EMAIL']exit
request.headers['HTTP_X_USER_EMAIL']
request.headers
request.headers['User-Email']
request.headers
request
params
url
user
body
headers["X-User-Email"]
headers["X-Content-Type-Options"]
headers
params
exit
body
headers['User-Email']
header['User-Email']
header['X-User-Email']
headers['X-User-Email']
headers
params
exit
sign_in user
user 
sign_in
current_user
params
headers
params
exit
headers
params
exit
current_user
user
headers
params
exit
params['user']
user_param
user_params
user_pagams
params
user
headers
sign_in
current_user
params
exit
headersexit
headers
params
authenticate_user_from_token
current_user
exit
header.inspect
headers.inspect
headers
header
headers
params.inspect
params
authenticate_user_from_token
user
current_user
exit
@user
exit
@user
@user.authentication_token = SecureRandom.hex(32)
@user = current_user
@user
exit
current_user
authenticate_user_from_token
@user
user
exit
current_user
exit
@user
params
user
exit
params['user']
params
authenticate_user_from_token!
@user = authenticate_user_from_token!
exit
current_user
exit
next
exit
user_token
@user
current_user
user
params
exit
current_user
user
exit
params
@user
user
exit
@user
current_user
user
exit
user
sign_in
sign_9in
@user
params
current_user
exit
current_user
params
exit
params
@user
@current_user
user
current_user
exit
current_user
user
params
exit
donut_params['name']
exit
params
exit
donut_params['name']
donut_params.name
donut_params
params['donut']
params
exit
params
exit
params
exit
params
exit
params
params['donut']
exit
params['donut']
params
donut_params
